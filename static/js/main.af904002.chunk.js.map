{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","CounterButton","updateCount","setState","count","nextProps","nextState","this","color","onClick","Component","Header","PureComponent","App","onRequestRobots","searchField","onSearchChange","isPending","filterRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","response","json","data","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.af904002.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\n\nconst Card = ({name, email, id}) => {\n    return (\n        <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n    return (\n        <div>\n            {\n                robots.map((user, i) => {\n                    return (\n                        <Card\n                            key={i}\n                            id={robots[i].id}\n                            name={robots[i].name}\n                            email={robots[i].email}\n                        />\n                    );\n                })\n            }\n        </div>\n    );\n};\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n    return (\n        <div className='pa2'>\n            <input\n                className='pa3 ba b--green bg-lightest-blue'\n                type='search'\n                placeholder='search robots'\n                onChange={searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    )\n};\n\nexport default Scroll;","import React, {Component, PureComponent} from 'react';\n\nclass CounterButton extends Component{\n    constructor(props) {\n        super(props);\n        this.state ={\n            count: 0\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (this.state.count !== nextState.count){\n            return true;\n        }\n        return false;\n    }\n\n    updateCount = () => {\n        this.setState(state => {\n            return {count: this.state.count + 1}\n        })\n    };\n\n    render() {\n        return (\n            <button color={this.props.color} onClick={this.updateCount} > Count : {this.state.count}  </button>\n        )\n    }\n}\n\nexport default CounterButton;","import React, { PureComponent} from 'react';\nimport CounterButton from \"./CounterButton\";\n\nclass Header extends PureComponent{\n    //shouldComponentUpdate(nextProps, nextState) {\n     //  return false;\n   // }\n\n    render() {\n        return (\n            <div>\n                <CounterButton color={'red'} />\n                <h1 className=\"h1\">RoboFriends</h1>\n            </div>\n\n        )\n    }\n}\n\nexport default Header;","import React, {Component} from \"react\";\nimport {connect} from 'react-redux'\nimport CarList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport './App.css'\nimport Scroll from \"../components/Scroll\";\nimport {setSerarchfield, requestRobots} from \"../actions\";\nimport Header from \"../components/Header\";\n\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch (setSerarchfield(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n\n    }\n};\n\nclass App extends Component{\n\n    componentDidMount() {\n       this.props.onRequestRobots()\n    }\n\n    render (){\n\n        const {searchField, onSearchChange, robots, isPending } = this.props;\n        const filterRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        });\n        return isPending ?\n             <h1>Loading</h1> :\n             (\n                <div className='tc'>\n                   <Header />\n                    <SearchBox searchChange={onSearchChange}/>\n                    <Scroll>\n                        <CarList robots={filterRobots}/>\n                    </Scroll>\n                </div>\n            );\n        }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDGING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from \"./constants\";\n\nexport const setSerarchfield = (text) => {\n    return {\n        type: CHANGE_SEARCH_FIELD,\n        payload: text\n    }\n};\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDGING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response=> response.json())\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n};","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_ROBOTS_PENDGING = 'REQUEST_ROBOTS_PENDGING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDGING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from \"./constants\";\n\nconst initialStateSearch = {\n    searchField: ''\n};\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, {searchField: action.payload})\n        default:\n            return state\n    }\n};\n\nconst initialStateRobots = {\n    robots: [],\n    isPending: false,\n    error: ''\n};\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDGING:\n            return Object.assign({}, state, {isPending: true});\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, {robots: action.payload, isPending: false});\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, {error: action.payload});\n        default:\n            return state\n    }\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\nimport {createStore, applyMiddleware, combineReducers} from 'redux'\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk'\nimport './index.css';\nimport 'tachyons'\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./containers/App\";\nimport {searchRobots, requestRobots} from \"./reducers\";\n\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware,logger));\n\nReactDOM.render(\n    <Provider  store={store}>su\n        <App/>\n    </Provider>\n    ,document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}